<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mirror Lake</title><link href="http://blog.jswh.me/" rel="alternate"></link><link href="http://blog.jswh.me/feeds/yi-dian-ji-lu.atom.xml" rel="self"></link><id>http://blog.jswh.me/</id><updated>2016-12-29T04:26:00+08:00</updated><entry><title>一些重构体会</title><link href="http://blog.jswh.me/yi-xie-zhong-gou-ti-hui.html" rel="alternate"></link><published>2016-12-29T04:26:00+08:00</published><updated>2016-12-29T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-29:yi-xie-zhong-gou-ti-hui.html</id><summary type="html">&lt;p&gt;最近在重构多媒体服务，包括爬虫和搜索量部分。原先的代码是一个实习生 Q 同学写的，用的 python。如果抽出其中的一块代码来看，
 Q 同学应该是一个实践的同学，代码质量还是很不错的，但是之前看的时候我还是很难理解他的编程思路。直到这次彻底的重构，才发现代码中的一些问题。
 这里记录下来，也是对自己的提醒。&lt;/p&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;p&gt;这其实是一个老生常谈的问题，而且大部分人其实都有这个意识，Q 同学在对的大部分的命名上也都在尽量选择合适词语。但是，对于工具函数的却没有一视同仁地对待。
比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _l(x):
    r = list(map(_ft, x))
    if len(r) == 1:
        r = r[0]
    return r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个内部函数，用来提取出爬虫中的元素，并根据获取的元素数量返回不同的数据结构。这个还是在这里爬虫数据的时候多次用到，即使不想太高级的用法，直接用
&lt;code&gt;get_result_as_list_or_string&lt;/code&gt;已经可以极大地缓解在阅读过程中返回去看这里干了什么的情况。同样的，用 &lt;code&gt;x&lt;/code&gt;、&lt;code&gt;r&lt;/code&gt;之类的做变量名，虽然我可以明白这个函数在
做什么操作，但是我并没有办法把它和业务的某一部分联系起来。&lt;/p&gt;
&lt;p&gt;这样的例子在整个源代码中还有很多，虽然最后还是可以看懂，但是读起来就不怎么舒畅。&lt;/p&gt;
&lt;h4&gt;以业务逻辑而不是功能对代码分层&lt;/h4&gt;
&lt;p&gt;按照我看代码的情况，原先的设计中式包括一个接口层，一个爬虫层，一个搜索引擎的实现层，最底下是支持各个层的 lib。
Q 同学做了很多的功能划分：一个 &lt;code&gt;api&lt;/code&gt; 文件夹放所有的 api 实现，一个 &lt;code&gt;engine&lt;/code&gt; 文件夹放各个目标爬取、搜索、和索引的实现文件，一个目标一个文件夹。
如果严格按照这样的方式来组织文件，到也不错，问题在于，Q 同学把 ES 相关的东西也放了进去，也许是觉得 ES 也是一种搜索实现吧，
但是 ES 的数据模型等其他信息等也一并放在了这里，这就让刚读代码的我有些搞不清自己之前的阅读思路是否是对的。&lt;/p&gt;
&lt;p&gt;实际上，整个业务逻辑是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用户发起搜索 --&amp;gt; 社区程序向多媒体服务发起搜索请求 --&amp;gt; 调用搜索接口，使用 ES 来搜本地库 --&amp;gt; 使用用户的搜索词去爬取、更新数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，ES 虽然也是搜索，但是在业务的层次是和这里的 &lt;code&gt;engine&lt;/code&gt; 是不同的：同样是 &lt;code&gt;search.py&lt;/code&gt;, 但 ES 下是真的搜索，其他的其实是各个爬虫的一部分；
同样是 &lt;code&gt;job.py&lt;/code&gt;, 但 ES 下的是其他爬虫的触发器;&lt;/p&gt;
&lt;p&gt;另一个问题是，因为是按照爬去的目标不同而进行的划分，所以在努力地爬取功能下完成各个工作，导致许多重复的工作。如果按照&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;爬取-&amp;gt;整理-&amp;gt;入库-&amp;gt;索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;流程，各个爬虫只有返回的多媒体数据结构一致， 入库和索引的步骤都可以用统一的实现。&lt;/p&gt;
&lt;p&gt;最终重构的时候，我去掉了 api 层，把搜索放回了社区程序，因为总共只有2 ~ 3个 ES 查询，且是强业务的功能，没有必要放在这样以爬虫为主的程序上，
还需要一层 &lt;code&gt;api&lt;/code&gt;, 用上 flask。爬取任务的触发就用 job 形式直接下发。整个程序就只按以下的流程来组织了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任务监视器 --&amp;gt; 爬虫 --&amp;gt; 入库 --&amp;gt; 索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;又因为，组成去掉额外的爬取源，所以合并了爬虫和入库。&lt;/p&gt;
&lt;h4&gt;保持程序的轻量&lt;/h4&gt;
&lt;p&gt;这个各人可能会有不同的习惯。我不在喜欢在功能很简单的时候就引入太重量的东西。比如如果你整个程序只有五句 SQL，就要引入一个 ORM。
多媒体服务中，一共不会用到超过10个 ES 的访问，而且这些访问的语句是固定死的，也不会频繁改动。而且 ES 的访问就是简单的 Http 请求，
所以自己写的 lib 文件并不会很麻烦。但是一旦用上了 &lt;code&gt;elasticsearch-dsl-py&lt;/code&gt;, 我除了要理解 ES，还要理解这个库的用法，就为了那不多几个 ES 请求。&lt;/p&gt;
&lt;p&gt;同样的，后台系统中是用开放可用的队列服务的，为什么一定要用 &lt;code&gt;celery&lt;/code&gt; 来复杂化这个事情。&lt;/p&gt;
&lt;h4&gt;结语&lt;/h4&gt;
&lt;p&gt;代码是我写的，但是以后阅读和维护代码的人并不一定是我；我现在知道这里为什么这么写，一个月后未必知道。
所以写代码的时候要多想想应该如何保持简介和逻辑的通顺，多问问我为什要这么写。&lt;/p&gt;</summary></entry><entry><title>初始化一个 Python 开发环境的正确姿势</title><link href="http://blog.jswh.me/chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html" rel="alternate"></link><published>2016-12-10T17:41:00+08:00</published><updated>2016-12-10T17:41:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-10:chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html</id><summary type="html">&lt;p&gt;在看这篇文章的时候，我需要两个假设，以避免做过多无关的解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设读者对 &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; 有最基本的了解，知道如何使用 &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt;。并且系统环境中已经安装有 Python 和 pip。&lt;/li&gt;
&lt;li&gt;假设读者对 &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtualenv&lt;/a&gt; 有最基本的了解，知道为什么要用 virtualenv。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果假设不成立，可以跟随上面的链接和 Google 来了解。&lt;/p&gt;
&lt;h3&gt;0x1 更换 pypi 源为豆瓣的源&lt;/h3&gt;
&lt;p&gt;如果网络环境好的话这一步也可以不做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.config/pip/
touch ~/.config/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pip.conf 文件中添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;60&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.doubanio.com/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x2 安装 virtualenv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x3 使用 vritualenv 初始化应用目录&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv path/to/your/app/folder/
source path/to/your/app/folder/bin/activate # 激活环境
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;virtualenv 初始化的时候可以有多种基本Python的环境选择。新版本默认是不会带上site-packages的干净环境。&lt;/p&gt;
&lt;h3&gt;0x4 安装依赖&lt;/h3&gt;
&lt;p&gt;比如 Flask &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者如果有&lt;code&gt;requirements.txt&lt;/code&gt;的话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x5 把 virtualenv 环境导入编辑器/IDE&lt;/h3&gt;
&lt;p&gt;这里仅以 VSCode 为例。先安装 &lt;a href="https://code.visualstudio.com/docs/languages/python"&gt;python 的语言插件&lt;/a&gt;，然后编辑 &lt;a href="https://code.visualstudio.com/docs/customization/userandworkspace"&gt;workerspace settings&lt;/a&gt;
增加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;python.autoComplete.extraPaths&amp;quot;: [
    &amp;quot;path/to/your/app/folder/lib&amp;quot;
],
&amp;quot;python.pythonPath&amp;quot;:&amp;quot;path/to/your/app/folder/bin/python&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以愉快的使用了。&lt;/p&gt;</summary></entry></feed>