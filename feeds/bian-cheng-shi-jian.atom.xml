<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mirror Lake - 编程实践</title><link href="http://blog.jswh.me/" rel="alternate"></link><link href="http://blog.jswh.me/feeds/bian-cheng-shi-jian.atom.xml" rel="self"></link><id>http://blog.jswh.me/</id><updated>2018-11-07T16:16:57+08:00</updated><entry><title>Rust 模块系统初探</title><link href="http://blog.jswh.me/rust-mo-kuai-xi-tong-chu-tan.html" rel="alternate"></link><published>2018-11-07T16:16:57+08:00</published><updated>2018-11-07T16:16:57+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2018-11-07:/rust-mo-kuai-xi-tong-chu-tan.html</id><summary type="html">&lt;p&gt;学习一门编程语言，知道如何引用外部的文件或者说模块系统是比较重要的一点，PHP用&lt;code&gt;autoload&lt;/code&gt;机制，C有经典的&lt;code&gt;include&lt;/code&gt;。最近写 &lt;a href="https://github.com/jswh/wslexe"&gt;wslexe&lt;/a&gt; 的时候，因为原作者用的 rust，所以就简单学习了一下。但是 rust 的模块文档是从顶部设计开始写的，很多概念，有些复杂，这里写一个应用导向的学习笔记。&lt;/p&gt;
&lt;h5&gt;引入文件&lt;/h5&gt;
&lt;p&gt;首先，让我们初始化一个项目。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir rustmod
&lt;span class="nb"&gt;cd&lt;/span&gt; rustmod
cargo init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们得到了下面这样的基础项目结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rustmod
├── Cargo.toml
└── src
    └── main.rs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;main.rs&lt;/code&gt;里面只有一个简单的输出的‘hello world’的&lt;code&gt;main&lt;/code&gt;函数。我们新增一个&lt;code&gt;functions.rs&lt;/code&gt;文件，将生成字符串的过程做成一个函数，供&lt;code&gt;main …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;学习一门编程语言，知道如何引用外部的文件或者说模块系统是比较重要的一点，PHP用&lt;code&gt;autoload&lt;/code&gt;机制，C有经典的&lt;code&gt;include&lt;/code&gt;。最近写 &lt;a href="https://github.com/jswh/wslexe"&gt;wslexe&lt;/a&gt; 的时候，因为原作者用的 rust，所以就简单学习了一下。但是 rust 的模块文档是从顶部设计开始写的，很多概念，有些复杂，这里写一个应用导向的学习笔记。&lt;/p&gt;
&lt;h5&gt;引入文件&lt;/h5&gt;
&lt;p&gt;首先，让我们初始化一个项目。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir rustmod
&lt;span class="nb"&gt;cd&lt;/span&gt; rustmod
cargo init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们得到了下面这样的基础项目结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rustmod
├── Cargo.toml
└── src
    └── main.rs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;main.rs&lt;/code&gt;里面只有一个简单的输出的‘hello world’的&lt;code&gt;main&lt;/code&gt;函数。我们新增一个&lt;code&gt;functions.rs&lt;/code&gt;文件，将生成字符串的过程做成一个函数，供&lt;code&gt;main&lt;/code&gt;函数调用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//file: rustmod/src/functions.rs&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, {}!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;functions.rs&lt;/code&gt;就成为了一个单文件模块，rust 中称为&lt;code&gt;mod&lt;/code&gt;，模块的名称就是文件的名称。模块内部的函数，只能在模块内部使用，如果要在模块外调用，需要用&lt;code&gt;pub&lt;/code&gt;关键词，显式声明函数可在外部使用，我自己把这个叫导出函数。&lt;/p&gt;
&lt;p&gt;下面我尝试在&lt;code&gt;main&lt;/code&gt;函数中使用&lt;code&gt;functions&lt;/code&gt;模块。使用的方式很简单，只要在使用前声明一下模块就可以了。声明模块使用&lt;code&gt;mod&lt;/code&gt;关键字。使用模块内函数的时候，需要用&lt;code&gt;::&lt;/code&gt;进行调用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//声明模块&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;::&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果去掉函数前的&lt;code&gt;pub&lt;/code&gt;关键词，编译器就会报错。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error&lt;span class="o"&gt;[&lt;/span&gt;E0603&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;hello&lt;span class="sb"&gt;`&lt;/span&gt; is private
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;模块的嵌套&lt;/h5&gt;
&lt;p&gt;rust 除了一个文件作为一个模块之外，还持支模块的嵌套。嵌套的方式，有两种。&lt;/p&gt;
&lt;p&gt;第一种是在一个文件内，用&lt;code&gt;mod&lt;/code&gt;关键字定义子模块。比如，我修改&lt;code&gt;functions.rs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//file: rustmod/src/functions.rs&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;util&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;: &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, {}!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样，模块也是私有的，要在外部调用也需要&lt;code&gt;pub&lt;/code&gt;关键字修饰。对应的&lt;code&gt;main&lt;/code&gt;函数就要改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//file: rustmod/src/main.rs&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;functions&lt;/span&gt;::&lt;span class="n"&gt;util&lt;/span&gt;::&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种形式，是用文件夹来组织模块。文件夹的名字是模块的名字，rust 会去寻找文件夹下面的&lt;code&gt;mod.rs&lt;/code&gt;作为模块的主文件，可以在里面写任意的 rust 代码，不过大多数时候用来输出目录内的子模块。我们来新建一个&lt;code&gt;util&lt;/code&gt;文件夹，作为一个工具库的模块，修改项目结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rustmod
├── Cargo.toml
└── src
    ├── main.rs
    └── util
        ├── functions.rs
        └── mod.rs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;mod.rs&lt;/code&gt;输出&lt;code&gt;functions&lt;/code&gt;模块。同样也需要用&lt;code&gt;pub&lt;/code&gt;关键词修饰，否则就只是&lt;code&gt;mod.rs&lt;/code&gt;文件内的私有子模块。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//file: rustmod/src/util/mod.rs&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;main.rs&lt;/code&gt;中的调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//file: rustmod/src/main.rs&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;util&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;::&lt;span class="n"&gt;functions&lt;/span&gt;::&lt;span class="n"&gt;util&lt;/span&gt;::&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;总结&lt;/h5&gt;
&lt;p&gt;rust 的模块由&lt;code&gt;mod&lt;/code&gt;关键字和文件系统两者结合定义。&lt;code&gt;mod&lt;/code&gt;关键字用来声明一个模块的名字，模块的内容或直接以&lt;code&gt;mod NAME {MOD CONTENT}&lt;/code&gt;的形式书写，或根据严格的规则查找对应源文件。文件查找规则有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询声明模块的文件所在目录中对应模块名称名字的&lt;code&gt;NAME.rs&lt;/code&gt;文件，如果有就作为模块使用。&lt;/li&gt;
&lt;li&gt;查询声明模块的文件所在目录中对应模块名字&lt;code&gt;NAME&lt;/code&gt;的文件夹，并且文件夹内有&lt;code&gt;mod.rs&lt;/code&gt;文件，如果有就以&lt;code&gt;mod.rs&lt;/code&gt;文件作为模块使用。&lt;/li&gt;
&lt;li&gt;上面的规则都可以互相嵌套。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我尝试了在&lt;code&gt;src&lt;/code&gt;目录下，同时存在&lt;code&gt;util.rs&lt;/code&gt;和&lt;code&gt;util&lt;/code&gt;文件夹，编译的时候报错&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error&lt;span class="o"&gt;[&lt;/span&gt;E0584&lt;span class="o"&gt;]&lt;/span&gt;: file &lt;span class="k"&gt;for&lt;/span&gt; module &lt;span class="sb"&gt;`&lt;/span&gt;util&lt;span class="sb"&gt;`&lt;/span&gt; found at both util.rs and util/mod.rs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以还有第四条规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在同一层级不能同时存在文件夹和文件类型的模块，否则会名字冲突。&lt;/li&gt;
&lt;/ol&gt;</content><category term="Rust"></category><category term="模块"></category></entry><entry><title>中数据分析</title><link href="http://blog.jswh.me/zhong-shu-ju-fen-xi.html" rel="alternate"></link><published>2017-06-19T17:03:00+08:00</published><updated>2017-06-19T17:03:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-06-19:/zhong-shu-ju-fen-xi.html</id><summary type="html">&lt;p&gt;same 在前段时间更新了数据的展示形式，数据流的方式意味着决策上将要更多地向个性化的方向发展。说到个性化，那就意味着大量的用户行为数据的收集和处理，意味着原先用 MySQL 还能支撑的统计分析将不再适用。因此，开始考虑需要一套大数据处理的工具。说到大数据，一般都会自然得想到 Hadoop 系的一系列工具，从计算引擎，到存储系统，再到查询工具。Hadoop 的这一整套东西，很好很强大，但也意味着架构的复杂。&lt;/p&gt;
&lt;p&gt;作为一个之前没有接触过任何 Hadoop 系统地超新手，我们艰难得尝试了几天，最终还是选择了放弃。放弃的原因，除了复杂度之外，更是因为一种杀鸡用牛刀的感觉。即使是全量的记录 same 的访问日志，每天也不过数 GB，这样的数据量，要直接上动辄十数台机器（hdfs + Hadoop + 控制节点）的集群着实有些奢侈（费用和维护成本）。而且，公司里也基本没有对 Hadoop 体系熟悉的人，后续的知识传承也很成问题。放弃了 Hadoop，就要重新寻找这样一种简单又可扩展的替代品：架构简单 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;same 在前段时间更新了数据的展示形式，数据流的方式意味着决策上将要更多地向个性化的方向发展。说到个性化，那就意味着大量的用户行为数据的收集和处理，意味着原先用 MySQL 还能支撑的统计分析将不再适用。因此，开始考虑需要一套大数据处理的工具。说到大数据，一般都会自然得想到 Hadoop 系的一系列工具，从计算引擎，到存储系统，再到查询工具。Hadoop 的这一整套东西，很好很强大，但也意味着架构的复杂。&lt;/p&gt;
&lt;p&gt;作为一个之前没有接触过任何 Hadoop 系统地超新手，我们艰难得尝试了几天，最终还是选择了放弃。放弃的原因，除了复杂度之外，更是因为一种杀鸡用牛刀的感觉。即使是全量的记录 same 的访问日志，每天也不过数 GB，这样的数据量，要直接上动辄十数台机器（hdfs + Hadoop + 控制节点）的集群着实有些奢侈（费用和维护成本）。而且，公司里也基本没有对 Hadoop 体系熟悉的人，后续的知识传承也很成问题。放弃了 Hadoop，就要重新寻找这样一种简单又可扩展的替代品：架构简单，用少数机器甚至单机即可组建；快速的扩展能力，来应对后续可能的数据增长。&lt;/p&gt;
&lt;p&gt;中间寻找评估各种软件的过程略过不表，最后选择了 Cassandra + Spark 的组合。&lt;/p&gt;
&lt;p&gt;Cassandra 同样脱胎于 Bigtable，借鉴了 Dynamo 的存储方式。对称节点的设计比 master-slave 的结构更加简洁而容易理解，也减少了组建集群的难度；虽然是 key-value 列式存储但和 RDMBS 类似的 table 概念，类似 SQL 的查询语言 CQL，使得它更好上手。相对于HDFS + HBase 的组合可以说相当轻量了。而 Spark，RDD 的高速，计算的通用性，以及简单的 API 都让它成为了不二选择。在初期，用 standalone cluster mode 也可以显著得减少建立和维护集群的消耗。更重要的是，Cassandra + Spark 的组合有 datastax 商业实践在先，相信即使是真·大数据的处理也可以支撑得起来。&lt;/p&gt;
&lt;p&gt;目前，same 在腾讯云上，用四台机器搭建起了一个超小型的数据收集和处理的集群，而扩大这集群需要只是购买一台机器，执行软件安装脚本，修改配置文件。随时应对产品锦鲤的粗暴需求。&lt;/p&gt;
&lt;p&gt;有了集群之后就是一些软性的配套需求了。我们简单规划了计算程序（用 Scala 并打包成 jar）的结构和部署目录，使得可以用统一的命令接口启动一个任务。利用了之前只有前端同志在用的 jenkins 做持续集成和自动部署。后续可能还需要一个启动任务的 web 界面，免去每次跑单一任务都要登录服务器的繁琐。实时计算目前还没有需求，但也在考虑中了。&lt;/p&gt;
&lt;p&gt;我不能说，这样的处理方式一定是最合理的，但对于有数据处理的需求又没有达到真大数据规模的阶段，还是值得一试。对于小公司来说，在满足需求的前提下，能省则省，毕竟已经不是几年前啦。&lt;/p&gt;</content></entry><entry><title>一些重构体会</title><link href="http://blog.jswh.me/yi-xie-zhong-gou-ti-hui.html" rel="alternate"></link><published>2016-12-29T04:26:00+08:00</published><updated>2016-12-29T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-29:/yi-xie-zhong-gou-ti-hui.html</id><summary type="html">&lt;p&gt;最近在重构多媒体服务，包括爬虫和搜索两部分。原先的代码是一个实习生 Q 同学写的，用的 python。如果抽出其中的一块代码来看，
 Q 同学应该是一个重实践的同学，代码质量还是很不错的，但是之前看的时候我还是很难理解他的编程思路。直到这次彻底的重构，才发现代码中的一些问题。
这里记录下来，也是对自己的提醒。&lt;/p&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;p&gt;这其实是一个老生常谈的问题，而且大部分人其实都有这个意识，Q 同学在对待大部分的命名上也都在尽量选择合适词汇。但是，对于工具函数却没有一视同仁。
比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _l(x):
    r = list(map(_ft, x))
    if len(r) == 1:
        r = r[0]
    return r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个内部函数，用来提取出爬取的元素，并根据获取的元素数量返回不同的数据结构，在爬取数据的时候多次用到。即使不用太高级的英语，直接用
&lt;code&gt;get_result_as_list_or_string&lt;/code&gt;已经可以极大地缓解在阅读过程中返回去看这里干了什么的情况。同样的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近在重构多媒体服务，包括爬虫和搜索两部分。原先的代码是一个实习生 Q 同学写的，用的 python。如果抽出其中的一块代码来看，
 Q 同学应该是一个重实践的同学，代码质量还是很不错的，但是之前看的时候我还是很难理解他的编程思路。直到这次彻底的重构，才发现代码中的一些问题。
这里记录下来，也是对自己的提醒。&lt;/p&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;p&gt;这其实是一个老生常谈的问题，而且大部分人其实都有这个意识，Q 同学在对待大部分的命名上也都在尽量选择合适词汇。但是，对于工具函数却没有一视同仁。
比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _l(x):
    r = list(map(_ft, x))
    if len(r) == 1:
        r = r[0]
    return r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个内部函数，用来提取出爬取的元素，并根据获取的元素数量返回不同的数据结构，在爬取数据的时候多次用到。即使不用太高级的英语，直接用
&lt;code&gt;get_result_as_list_or_string&lt;/code&gt;已经可以极大地缓解在阅读过程中返回去看这里干了什么的情况。同样的，用 &lt;code&gt;x&lt;/code&gt;、&lt;code&gt;r&lt;/code&gt;之类的做变量名，
虽然我可以明白这个函数在做什么操作，但是我并没有办法把它和业务的某一部分联系起来。&lt;/p&gt;
&lt;p&gt;这样的例子在整个源代码中还有很多，虽然最后还是可以看懂，但是读起来就不怎么舒畅。&lt;/p&gt;
&lt;h4&gt;保持程序的轻量&lt;/h4&gt;
&lt;p&gt;这个各人可能会有不同的习惯。我不喜欢在功能很简单的时候就引入太重量级的东西。比如，如果你整个程序只有五句 SQL，那为什么要引入一个 ORM。
多媒体服务中，一共不会用到超过10个 ES 访问，而且这些访问的语句是固定死的，也不会频繁改动。ES 的访问就是简单的 Http 请求，
所以自己写个文件来处理并不会很麻烦。但是一旦用上了 &lt;code&gt;elasticsearch-dsl-py&lt;/code&gt;, 我除了要理解 ES，还要理解这个库的用法，就为了那不多的几个 ES 请求。&lt;/p&gt;
&lt;p&gt;同样的，后台系统中是有开放可用的队列服务的，为什么一定要用 &lt;code&gt;celery&lt;/code&gt; 来复杂化这个事情，还导致重建 ES 索引这样的任务必须要用 api 才能下发。&lt;/p&gt;
&lt;h4&gt;以业务逻辑而不是功能对代码分层&lt;/h4&gt;
&lt;p&gt;按照我看代码的情况，原先的设计中包括一个接口层，一个爬虫层，一个搜索引擎的实现层，最底下是支持各个层的 lib。
Q 同学做了很多的功能划分：一个 &lt;code&gt;api&lt;/code&gt; 文件夹放所有的 api 实现，一个 &lt;code&gt;engine&lt;/code&gt; 文件夹放各个源的搜索、爬取和索引的实现文件，一个源一个文件夹。
如果严格按照这样的方式来组织文件，到也不错，问题在于，Q 同学把 ES 相关的东西也放了进去，也许是觉得 ES 也是一种搜索实现吧，
但是 ES 的数据模型等其他信息也一并放在了这里，这就让刚读代码的我有些搞不清自己之前的阅读思路是否是对的。&lt;/p&gt;
&lt;p&gt;实际上，整个业务逻辑是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用户发起搜索 --&amp;gt; 社区程序向多媒体服务发起搜索请求 --&amp;gt; 调用搜索接口，使用 ES 来搜本地库 --&amp;gt; 使用用户的搜索词去爬取、更新数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，ES 虽然也是搜索，但是在中业务的层次是和这里的 &lt;code&gt;engine&lt;/code&gt; 不同的：同样是 &lt;code&gt;search.py&lt;/code&gt;, ES 下是真的搜索，其他的其实是各个爬虫的组件；
同样是 &lt;code&gt;job.py&lt;/code&gt;, 各个源下的是爬虫任务，ES 下的则爬虫的触发器;&lt;/p&gt;
&lt;p&gt;另一个问题是，因为是按照爬取的目标不同而进行的划分，所以在努力地爬取功能下完成各个工作，导致许多重复的工作。如果按照&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;爬取-&amp;gt;整理-&amp;gt;入库-&amp;gt;索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;流程，各个爬虫只要返回的多媒体数据结构一致， 入库和索引的步骤都可以用统一的实现。&lt;/p&gt;
&lt;p&gt;最终重构的时候，我去掉了 api 层，把搜索放回了社区程序，因为总共只有2 ~ 3个 ES 查询，且是强业务的功能，没有必要放在这样以爬虫为主的程序上，
还需要一层 &lt;code&gt;api&lt;/code&gt;, 用上 flask。爬取任务的触发就用 job 形式直接下发到队列。整个程序就按以下的流程来组织了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任务监视器 --&amp;gt; 爬虫 --&amp;gt; 入库 --&amp;gt; 索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;又因为，去掉额外的爬取源，所以合并了爬虫和入库。&lt;/p&gt;
&lt;h4&gt;结语&lt;/h4&gt;
&lt;p&gt;代码是我写的，但是以后阅读和维护代码的人并不一定是我；我现在知道这里为什么这么写，一个月后未必知道。
所以写代码的时候要多想想应该如何保持简洁和逻辑的通顺，多问问我为什要这么写。&lt;/p&gt;</content></entry><entry><title>初始化一个 Python 开发环境的正确姿势</title><link href="http://blog.jswh.me/chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html" rel="alternate"></link><published>2016-12-10T17:41:00+08:00</published><updated>2016-12-10T17:41:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-10:/chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html</id><summary type="html">&lt;p&gt;在看这篇文章的时候，我需要两个假设，以避免做过多无关的解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设读者对 &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; 有最基本的了解，知道如何使用 &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt;。并且系统环境中已经安装有 Python 和 pip。&lt;/li&gt;
&lt;li&gt;假设读者对 &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtualenv&lt;/a&gt; 有最基本的了解，知道为什么要用 virtualenv。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果假设不成立，可以跟随上面的链接和 Google 来了解。&lt;/p&gt;
&lt;h3&gt;0x1 更换 pypi 源为豆瓣的源&lt;/h3&gt;
&lt;p&gt;如果网络环境好的话这一步也可以不做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.config/pip/
touch ~/.config/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pip.conf 文件中添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;60&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.doubanio.com/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x2 安装 virtualenv …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;在看这篇文章的时候，我需要两个假设，以避免做过多无关的解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设读者对 &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; 有最基本的了解，知道如何使用 &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt;。并且系统环境中已经安装有 Python 和 pip。&lt;/li&gt;
&lt;li&gt;假设读者对 &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtualenv&lt;/a&gt; 有最基本的了解，知道为什么要用 virtualenv。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果假设不成立，可以跟随上面的链接和 Google 来了解。&lt;/p&gt;
&lt;h3&gt;0x1 更换 pypi 源为豆瓣的源&lt;/h3&gt;
&lt;p&gt;如果网络环境好的话这一步也可以不做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.config/pip/
touch ~/.config/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pip.conf 文件中添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;60&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.doubanio.com/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x2 安装 virtualenv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x3 使用 vritualenv 初始化应用目录&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv path/to/your/app/folder/
source path/to/your/app/folder/bin/activate # 激活环境
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;virtualenv 初始化的时候可以有多种基本Python的环境选择。新版本默认是不会带上site-packages的干净环境。&lt;/p&gt;
&lt;h3&gt;0x4 安装依赖&lt;/h3&gt;
&lt;p&gt;比如 Flask &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者如果有&lt;code&gt;requirements.txt&lt;/code&gt;的话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x5 把 virtualenv 环境导入编辑器/IDE&lt;/h3&gt;
&lt;p&gt;这里仅以 VSCode 为例。先安装 &lt;a href="https://code.visualstudio.com/docs/languages/python"&gt;python 的语言插件&lt;/a&gt;，然后编辑 &lt;a href="https://code.visualstudio.com/docs/customization/userandworkspace"&gt;workerspace settings&lt;/a&gt;
增加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;python.autoComplete.extraPaths&amp;quot;: [
    &amp;quot;path/to/your/app/folder/lib&amp;quot;
],
&amp;quot;python.pythonPath&amp;quot;:&amp;quot;path/to/your/app/folder/bin/python&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以愉快的使用了。&lt;/p&gt;</content><category term="python"></category><category term="virtualenv"></category></entry></feed>