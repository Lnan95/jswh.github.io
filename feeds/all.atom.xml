<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mirror Lake</title><link href="https://blog.jswh.me/" rel="alternate"></link><link href="https://blog.jswh.me/feeds/all.atom.xml" rel="self"></link><id>https://blog.jswh.me/</id><updated>2017-06-19T17:03:00+08:00</updated><entry><title>中数据分析</title><link href="https://blog.jswh.me/zhong-shu-ju-fen-xi.html" rel="alternate"></link><published>2017-06-19T17:03:00+08:00</published><updated>2017-06-19T17:03:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-06-19:/zhong-shu-ju-fen-xi.html</id><summary type="html">&lt;p&gt;same 在前段时间更新了数据的展示形式，数据流的方式意味着决策上将要更多地向个性化的方向发展。说到个性化，那就意味着大量的用户行为数据的收集和处理，意味着原先用 MySQL 还能支撑的统计分析将不再适用。因此，开始考虑需要一套大数据处理的工具。说到大数据，一般都会自然得想到 Hadoop 系的一系列工具，从计算引擎，到存储系统，再到查询工具。Hadoop 的这一整套东西，很好很强大，但也意味着架构的复杂。&lt;/p&gt;
&lt;p&gt;作为一个之前没有接触过任何 Hadoop 系统地超新手，我们艰难得尝试了几天，最终还是选择了放弃。放弃的原因，除了复杂度之外，更是因为一种杀鸡用牛刀的感觉。即使是全量的记录 same 的访问日志，每天也不过数 GB，这样的数据量，要直接上动辄十数台机器（hdfs + Hadoop + 控制节点）的集群着实有些奢侈（费用和维护成本）。而且，公司里也基本没有对 Hadoop 体系熟悉的人，后续的知识传承也很成问题。放弃了 Hadoop，就要重新寻找这样一种简单又可扩展的替代品：架构简单 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;same 在前段时间更新了数据的展示形式，数据流的方式意味着决策上将要更多地向个性化的方向发展。说到个性化，那就意味着大量的用户行为数据的收集和处理，意味着原先用 MySQL 还能支撑的统计分析将不再适用。因此，开始考虑需要一套大数据处理的工具。说到大数据，一般都会自然得想到 Hadoop 系的一系列工具，从计算引擎，到存储系统，再到查询工具。Hadoop 的这一整套东西，很好很强大，但也意味着架构的复杂。&lt;/p&gt;
&lt;p&gt;作为一个之前没有接触过任何 Hadoop 系统地超新手，我们艰难得尝试了几天，最终还是选择了放弃。放弃的原因，除了复杂度之外，更是因为一种杀鸡用牛刀的感觉。即使是全量的记录 same 的访问日志，每天也不过数 GB，这样的数据量，要直接上动辄十数台机器（hdfs + Hadoop + 控制节点）的集群着实有些奢侈（费用和维护成本）。而且，公司里也基本没有对 Hadoop 体系熟悉的人，后续的知识传承也很成问题。放弃了 Hadoop，就要重新寻找这样一种简单又可扩展的替代品：架构简单，用少数机器甚至单机即可组建；快速的扩展能力，来应对后续可能的数据增长。&lt;/p&gt;
&lt;p&gt;中间寻找评估各种软件的过程略过不表，最后选择了 Cassandra + Spark 的组合。&lt;/p&gt;
&lt;p&gt;Cassandra 同样脱胎于 Bigtable，借鉴了 Dynamo 的存储方式。对称节点的设计比 master-slave 的结构更加简洁而容易理解，也减少了组建集群的难度；虽然是 key-value 列式存储但和 RDMBS 类似的 table 概念，类似 SQL 的查询语言 CQL，使得它更好上手。相对于HDFS + HBase 的组合可以说相当轻量了。而 Spark，RDD 的高速，计算的通用性，以及简单的 API 都让它成为了不二选择。在初期，用 standalone cluster mode 也可以显著得减少建立和维护集群的消耗。更重要的是，Cassandra + Spark 的组合有 datastax 商业实践在先，相信即使是真·大数据的处理也可以支撑得起来。&lt;/p&gt;
&lt;p&gt;目前，same 在腾讯云上，用四台机器搭建起了一个超小型的数据收集和处理的集群，而扩大这集群需要只是购买一台机器，执行软件安装脚本，修改配置文件。随时应对产品锦鲤的粗暴需求。&lt;/p&gt;
&lt;p&gt;有了集群之后就是一些软性的配套需求了。我们简单规划了计算程序（用 Scala 并打包成 jar）的结构和部署目录，使得可以用统一的命令接口启动一个任务。利用了之前只有前端同志在用的 jenkins 做持续集成和自动部署。后续可能还需要一个启动任务的 web 界面，免去每次跑单一任务都要登录服务器的繁琐。实时计算目前还没有需求，但也在考虑中了。&lt;/p&gt;
&lt;p&gt;我不能说，这样的处理方式一定是最合理的，但对于有数据处理的需求又没有达到真大数据规模的阶段，还是值得一试。对于小公司来说，在满足需求的前提下，能省则省，毕竟已经不是几年前啦。&lt;/p&gt;</content></entry><entry><title>我</title><link href="https://blog.jswh.me/wo.html" rel="alternate"></link><published>2017-02-20T04:26:00+08:00</published><updated>2017-02-20T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-02-20:/wo.html</id><summary type="html">&lt;p&gt;从14年一月份进入百姓网开始全职实习算起，参加工作也三年又两个月了。去年后半年从百姓网离职，来到  same，希望能为我喜欢的产品出一点力。但是六个月过去，虽然 same 给了很高的自由度，也没有太大的作为。除了产品上的问题之外，可能还是作为技术人的能力并不如自己所想的那样，已经到了可以做出哪怕些微的创新的地步。所以最近的两三个月一直都在感到焦虑，重新感到了工作之初时那种觉得自己什么都不会的感觉。不过区别是，彼时觉得自己是萌新，学习能力有自信，那种认为自己什么都不会的感觉可是强大的学习动力。而此时则是短暂的膨胀期之后的幡然醒悟，是一种失落。&lt;/p&gt;
&lt;p&gt;我很喜欢编程。准确的说，我喜欢所有和创造有关的事物，讨厌重复劳动。可惜本身手残，小时候也没有条件去接受艺术的熏陶。好在，有编程这个纯粹脑力的创造活动。怀着一腔热爱进入这个行业，但从一开始工作，就对自己的非科班出身的经历耿耿于怀，总觉得心里很慌。可真的去尝试学习的时候，则感觉那些东西在工作中真的很难用到，理解一些基本概念后就不怎么愿意花时间去做练习巩固，然后心里依然很慌。&lt;/p&gt;
&lt;p&gt;直到去年接近年末的时候，才想明白，心慌的原因并不是不会，而是不知道自己究竟会什么，或者说没有什么东西来证明自己会什么。&lt;/p&gt;
&lt;p&gt;对自己只有模糊的感觉：能力水平还可以，正确理解业务并实现以及处理常规的性能问题都没事问题；技术的深度不行，深入底层之后比较无力；广度还可以，半个全栈 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;从14年一月份进入百姓网开始全职实习算起，参加工作也三年又两个月了。去年后半年从百姓网离职，来到  same，希望能为我喜欢的产品出一点力。但是六个月过去，虽然 same 给了很高的自由度，也没有太大的作为。除了产品上的问题之外，可能还是作为技术人的能力并不如自己所想的那样，已经到了可以做出哪怕些微的创新的地步。所以最近的两三个月一直都在感到焦虑，重新感到了工作之初时那种觉得自己什么都不会的感觉。不过区别是，彼时觉得自己是萌新，学习能力有自信，那种认为自己什么都不会的感觉可是强大的学习动力。而此时则是短暂的膨胀期之后的幡然醒悟，是一种失落。&lt;/p&gt;
&lt;p&gt;我很喜欢编程。准确的说，我喜欢所有和创造有关的事物，讨厌重复劳动。可惜本身手残，小时候也没有条件去接受艺术的熏陶。好在，有编程这个纯粹脑力的创造活动。怀着一腔热爱进入这个行业，但从一开始工作，就对自己的非科班出身的经历耿耿于怀，总觉得心里很慌。可真的去尝试学习的时候，则感觉那些东西在工作中真的很难用到，理解一些基本概念后就不怎么愿意花时间去做练习巩固，然后心里依然很慌。&lt;/p&gt;
&lt;p&gt;直到去年接近年末的时候，才想明白，心慌的原因并不是不会，而是不知道自己究竟会什么，或者说没有什么东西来证明自己会什么。&lt;/p&gt;
&lt;p&gt;对自己只有模糊的感觉：能力水平还可以，正确理解业务并实现以及处理常规的性能问题都没事问题；技术的深度不行，深入底层之后比较无力；广度还可以，半个全栈，基本可以一人包揽从运维到前端的大多数工作，不过前端技能树杂而不精，只能应付简单的业务。然而这些只是个人评价，而不是自我理解。没有细节的理解都是耍流氓。而且也没有什么能明确的证明这些评价的东西，毕竟平时做的都是再平常不过的工作。唯一自我感觉良好的，是代码结构的设计，但这真的没法构成一个可以言说的点。&lt;/p&gt;
&lt;p&gt;认识你自己！贤哲这样说过。&lt;/p&gt;
&lt;p&gt;不知道会什么，就没法摆正自己的位置。连自己都不知道自己会什么，那面试的时候，当然也就没法给别人说清楚，把自己的能力展现出来，只能跟着面试官问一句答一句。于是最近一段时间尝试了很多方法，希望可以把自己的能力表达出来。试过个人维基、试过思维导图，但总觉得不对味。 维基太过分散，思维导图太过笼统。想来想去还是需要用文字系统化地组织自己的知识。但文字与维基的不同在于，需要有一个行文的线索，不然不仅无从写起，也无法达到系统化的目的。没有系统化，对自己的认识依然是模糊的。&lt;/p&gt;</content></entry><entry><title>一个博客的诞生</title><link href="https://blog.jswh.me/yi-ge-bo-ke-de-dan-sheng.html" rel="alternate"></link><published>2017-02-04T04:26:00+08:00</published><updated>2017-02-04T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-02-04:/yi-ge-bo-ke-de-dan-sheng.html</id><summary type="html">&lt;p&gt;题目有些标题党了，其实只是想聊一下自己的用的&lt;a href="https://github.com/jswh/jswh.github.io"&gt;博客程序&lt;/a&gt;，因为有人留言说博客打开很快。老实说，这东西其实够不上“程序”，因为只是两三个脚本配合着一些现成的工具，做了一键部署罢了。&lt;/p&gt;
&lt;p&gt;我对用 gh-pages 做博客一直有一点怨念，觉得 Hexo 之类的都太麻烦：先要安装执行环境，然后安装生成器，然后一大堆的配置文件，部署的时候还要反复的敲命令，clean、generate、deploy之类的。但是另一方面还是，还是很想用 gh-pages 做博客。除了免费速度也不错之外，最主要的还是 git 版本管理的特性，以及可以直接用自己喜欢的编辑器来编辑。各个生成器对 markdown 之类的标记语法也都支持得比较好，不用像在网页上写一样格式不断调。可能真的是到了&lt;a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html"&gt;阮一峰老师说的博客三阶段&lt;/a&gt;的最后一阶段了，想要的就是一个简单快捷的记录和发布文字的地方。&lt;/p&gt;
&lt;p&gt;但是我一直都没有找到这样的 gh-pages 生成程序。其实最理想的情况是直接一个单页应用， 基于 github 提供的 API 来获取文章的内容，前端渲染。自己也尝试着 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;题目有些标题党了，其实只是想聊一下自己的用的&lt;a href="https://github.com/jswh/jswh.github.io"&gt;博客程序&lt;/a&gt;，因为有人留言说博客打开很快。老实说，这东西其实够不上“程序”，因为只是两三个脚本配合着一些现成的工具，做了一键部署罢了。&lt;/p&gt;
&lt;p&gt;我对用 gh-pages 做博客一直有一点怨念，觉得 Hexo 之类的都太麻烦：先要安装执行环境，然后安装生成器，然后一大堆的配置文件，部署的时候还要反复的敲命令，clean、generate、deploy之类的。但是另一方面还是，还是很想用 gh-pages 做博客。除了免费速度也不错之外，最主要的还是 git 版本管理的特性，以及可以直接用自己喜欢的编辑器来编辑。各个生成器对 markdown 之类的标记语法也都支持得比较好，不用像在网页上写一样格式不断调。可能真的是到了&lt;a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html"&gt;阮一峰老师说的博客三阶段&lt;/a&gt;的最后一阶段了，想要的就是一个简单快捷的记录和发布文字的地方。&lt;/p&gt;
&lt;p&gt;但是我一直都没有找到这样的 gh-pages 生成程序。其实最理想的情况是直接一个单页应用， 基于 github 提供的 API 来获取文章的内容，前端渲染。自己也尝试着&lt;a href="https://github.com/jswh/MDBlog"&gt;实现过一个&lt;/a&gt;。但 API 毕竟不是用来搞博客的，排序、标签等等很多功能要么没法实现，要么实现起来很麻烦甚至对编写和目录结构提出了要求。最后也还是没继续做下去，也没有用起来。&lt;/p&gt;
&lt;p&gt;后来觉得，不就是各种步骤要手动麻烦吗，作为一个程序员最不应该怕的就是这个了啊。于是就开始慢慢地一点一点组合这些工具，写一点脚本。因为在家里用的台式是 windows 所以也做了 windows 的适配。目前已经，个人觉得，已经把安转和配置过程最简化了。除了 python 和 git 要自己装，其他的就是部署一个脚本要在一开始执行一次，发布一个脚本在每次写完文章后执行一次。&lt;/p&gt;
&lt;p&gt;详细的安装和使用过程已经在项目的介绍里了，欢迎 star 和使用反馈。&lt;/p&gt;
&lt;p&gt;所以说，偷懒才是第一生产力啊。&lt;/p&gt;</content></entry><entry><title>个人成长与工作</title><link href="https://blog.jswh.me/ge-ren-cheng-chang-yu-gong-zuo.html" rel="alternate"></link><published>2017-01-02T01:39:00+08:00</published><updated>2017-01-02T01:39:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-01-02:/ge-ren-cheng-chang-yu-gong-zuo.html</id><summary type="html">&lt;p&gt;其实12点不到就睡了，但是一直睡不着，又不想写代码，担心一写又到早上了。所以还是来写写鸡汤吧。&lt;/p&gt;
&lt;p&gt;从实习算起，参加工作也又三年了，对于工作与个人成长的关系也算是有自己的一点理解。恰好之前与人讨论了一番，感觉值得梳理一下。&lt;/p&gt;
&lt;p&gt;首先，我觉得工作是公事而个人的成长是私事，企业有义务帮助员工适应工作环境(对于实习生来说这包括必备的工作技能)，但并不对员工的个人成长负有任何责任。所以，一般培训一项是作为福利存在的。至于人才培养计划之类的，那是企业在对人力资源的成本衡量后的结果。如果引进人才的成本比较低的话，我想没有企业会花这笔钱。明确这一点之后，才明白为什么渡过了最初期的适应阶段之后会觉得自己不再长进了，因为一旦你可以胜任工作之后没有人会再催着你学了；如果出现一项你无法胜任的工作，很多时候都是安排有能力的人去做。&lt;/p&gt;
&lt;p&gt;从这里也可以看出，为什么说八点到十点的两个小时，才决定了一个人发展：因为工作时间，企业对你的要求就是重复你已有的技能，而你却想从中获取新的技能，那可不是缘木求鱼；只有工作后的自我学习，才是真正属于自己的，习得新的技能的时间。如果用这些时间获取了新的技能，而下次出现了需要该项技能的业务，那不就可以在其他人中脱颖而出了么。想象一下，一个流水线上的工人，如果在课后自学了机器的运行原理；在某次机器故障，所有人都无所适从的时候，试着解决了问题，你觉得老板会不会考虑安排他去跟着老师傅学习机修？&lt;/p&gt;
&lt;p&gt;当然，这种机会是可遇而不可求的，所以称为机遇.而我们能做的是在做好准备的同时 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;其实12点不到就睡了，但是一直睡不着，又不想写代码，担心一写又到早上了。所以还是来写写鸡汤吧。&lt;/p&gt;
&lt;p&gt;从实习算起，参加工作也又三年了，对于工作与个人成长的关系也算是有自己的一点理解。恰好之前与人讨论了一番，感觉值得梳理一下。&lt;/p&gt;
&lt;p&gt;首先，我觉得工作是公事而个人的成长是私事，企业有义务帮助员工适应工作环境(对于实习生来说这包括必备的工作技能)，但并不对员工的个人成长负有任何责任。所以，一般培训一项是作为福利存在的。至于人才培养计划之类的，那是企业在对人力资源的成本衡量后的结果。如果引进人才的成本比较低的话，我想没有企业会花这笔钱。明确这一点之后，才明白为什么渡过了最初期的适应阶段之后会觉得自己不再长进了，因为一旦你可以胜任工作之后没有人会再催着你学了；如果出现一项你无法胜任的工作，很多时候都是安排有能力的人去做。&lt;/p&gt;
&lt;p&gt;从这里也可以看出，为什么说八点到十点的两个小时，才决定了一个人发展：因为工作时间，企业对你的要求就是重复你已有的技能，而你却想从中获取新的技能，那可不是缘木求鱼；只有工作后的自我学习，才是真正属于自己的，习得新的技能的时间。如果用这些时间获取了新的技能，而下次出现了需要该项技能的业务，那不就可以在其他人中脱颖而出了么。想象一下，一个流水线上的工人，如果在课后自学了机器的运行原理；在某次机器故障，所有人都无所适从的时候，试着解决了问题，你觉得老板会不会考虑安排他去跟着老师傅学习机修？&lt;/p&gt;
&lt;p&gt;当然，这种机会是可遇而不可求的，所以称为机遇.而我们能做的是在做好准备的同时，让这种机遇发生的可能性尽量提高一些。因此，学什么就很重要。我的经验是，去学和工作紧密相关的。听起来很虚，但其实很简单。比如我，并不是计算机科班出身，加入互联网行业时基本是空白。在刚开始工作，学会了用框架提供的接口来增删改查写业务逻辑之后，已经满足了工作的基本要求，似乎已经没有什么可学的了。只是那段时间正是对编程知识如饥似渴的时候，无意识地希望了解框架背后的原理，去真正的理解OOP、MVC、Restful这些高大上的名词，也恰好遇到了一个好的老师耐心指导，虽然这些东西对于写当时的业务逻辑其实并没有什么用（其实还是有点用的），但当新的产品计划出来，可以参与后端架构是我，而不是同期的其他人，我觉得还是有挺大关系的。&lt;/p&gt;
&lt;p&gt;工作的内容是一个点，除了把这个点画大，更可以做的是找到相关联的点，把他们连起来——这是从开垦到跑马圈地的变化。深化自己的已掌握的知识，让点变成圆，可以有更长的边界去连接更多的点。这样能力才可以即保有深度，有扩张广度。所以，我还是挺喜欢工作总结的，可以把工作内容这个点描述清楚，知道自己的边界在哪里，这样才有的放矢。&lt;/p&gt;
&lt;p&gt;总结起来，个人成长与工作的关系是一句鸡汤的无比的话：从工作中来，到工作中去。&lt;/p&gt;</content></entry><entry><title>开始一段新的旅程</title><link href="https://blog.jswh.me/kai-shi-yi-duan-xin-de-lu-cheng.html" rel="alternate"></link><published>2017-01-01T15:27:00+08:00</published><updated>2017-01-01T15:27:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2017-01-01:/kai-shi-yi-duan-xin-de-lu-cheng.html</id><summary type="html">&lt;p&gt;我是一个仪式感非常强的人，如果不做点什么来声明重要的节点，惴惴不安的情绪会始终无法散去。所以，我挺喜欢总结和展望这类文字的：写完年终总结才觉得过去的一年到此为止了；写完新年计划才认为新的一年正式开始了。&lt;/p&gt;
&lt;p&gt;二零一六年过得不怎么顺利：感情起伏不定，最终还是面临结束；个人能力的提升趋于平缓乃至瓶颈；换了一份工作，涨薪的幅度刚抵过房租的涨幅。当然也会有一些进步：技能的平稳导致会有时间用现有的技能做一些产出；学会了双拼；正在为自己喜欢的产品贡献一份绵薄之力；注册了一家公司，虽然没有正式开张。总的来说，过去的一年自己有一些长进，但不大，只有心态在越来越趋于平和。去年的总结就这样吧，除了感情的起起伏伏，其他真是没有太多可以回忆和记述的东西，至于感情的事，不说也罢。&lt;/p&gt;
&lt;p&gt;二零一七年希望能发布一个完整的产品，并且好好地运营，可以够上一万用户的门槛，因为不知是谁说过：如果没有运营过一个超过一万用户的产品，就不要去创业。可能也是一种仪式吧，就和铁血战士的成年礼一样，要拼杀一番。当然，这是业余时间的目标，重心还是 same，既然对她爱得深沉，那就发现她的不足并用自己的能力去填补。我相信 same 是独一无二的，她的设计不以人的生理需求出发，希望能够走得更远。 &lt;/p&gt;
&lt;p&gt;个人的能力和品质上，希望新的一年能每个月养成一两个好的小习惯 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;我是一个仪式感非常强的人，如果不做点什么来声明重要的节点，惴惴不安的情绪会始终无法散去。所以，我挺喜欢总结和展望这类文字的：写完年终总结才觉得过去的一年到此为止了；写完新年计划才认为新的一年正式开始了。&lt;/p&gt;
&lt;p&gt;二零一六年过得不怎么顺利：感情起伏不定，最终还是面临结束；个人能力的提升趋于平缓乃至瓶颈；换了一份工作，涨薪的幅度刚抵过房租的涨幅。当然也会有一些进步：技能的平稳导致会有时间用现有的技能做一些产出；学会了双拼；正在为自己喜欢的产品贡献一份绵薄之力；注册了一家公司，虽然没有正式开张。总的来说，过去的一年自己有一些长进，但不大，只有心态在越来越趋于平和。去年的总结就这样吧，除了感情的起起伏伏，其他真是没有太多可以回忆和记述的东西，至于感情的事，不说也罢。&lt;/p&gt;
&lt;p&gt;二零一七年希望能发布一个完整的产品，并且好好地运营，可以够上一万用户的门槛，因为不知是谁说过：如果没有运营过一个超过一万用户的产品，就不要去创业。可能也是一种仪式吧，就和铁血战士的成年礼一样，要拼杀一番。当然，这是业余时间的目标，重心还是 same，既然对她爱得深沉，那就发现她的不足并用自己的能力去填补。我相信 same 是独一无二的，她的设计不以人的生理需求出发，希望能够走得更远。 &lt;/p&gt;
&lt;p&gt;个人的能力和品质上，希望新的一年能每个月养成一两个好的小习惯，一月份是每天十二点前睡觉、每天记账和及时给鸡排铲屎。好好用&lt;a href="https://play.google.com/store/apps/details?id=org.isoron.uhabits"&gt;习惯&lt;/a&gt;这个应用，明年的这时候来看图说话；真的要好好学习英语，这里一年来感触真的是太深了，如果英语够好，很可能已经肉翻了。专业技能上，计算机四大课，特别是算法和操作系统，要补得充分一些，技能的瓶颈应该就是他们的锅了。新的东西也要继续学，两千块的机器学习课程不能白买。&lt;/p&gt;
&lt;p&gt;另外比较重要的事情是，持续更新博客，好好完善个人维基，把这两个东西作为自己在互联网上的门面，在没有那么出名的项目的时候，总不能让别人去看源码。而且，文字输出也是个人思想的整理和总结，更是对自己的梳理。&lt;/p&gt;
&lt;p&gt;经济的增速在放缓，这个世界已经没有太多的红利给予普通的个人，让他们摆脱桎梏，可以自由选择想要的生活。但不论如何，二零一七，在三的三次方的年纪，在中国文化中可以无限大的数字里，还是要在这水泥丛林之间，胸怀理想，彳亍或奔跑，不要停下。新的一年，也许要独自走过了：父母已经无力给予更多支持，爱情也已遥不可及，只有理想，对自由的渴望还在催促着自己前行。&lt;/p&gt;
&lt;p&gt;哦，我还有&lt;a href="http://7xjasi.com1.z0.glb.clouddn.com/IMG_20161224_151652_mh1483261617831.jpg"&gt;鸡排&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="鸡排" src="http://7xjasi.com1.z0.glb.clouddn.com/IMG_20161224_151652_mh1483261617831.jpg-sm" title="你要干嘛"&gt;&lt;/p&gt;</content></entry><entry><title>一些重构体会</title><link href="https://blog.jswh.me/yi-xie-zhong-gou-ti-hui.html" rel="alternate"></link><published>2016-12-29T04:26:00+08:00</published><updated>2016-12-29T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-29:/yi-xie-zhong-gou-ti-hui.html</id><summary type="html">&lt;p&gt;最近在重构多媒体服务，包括爬虫和搜索两部分。原先的代码是一个实习生 Q 同学写的，用的 python。如果抽出其中的一块代码来看，
 Q 同学应该是一个重实践的同学，代码质量还是很不错的，但是之前看的时候我还是很难理解他的编程思路。直到这次彻底的重构，才发现代码中的一些问题。
这里记录下来，也是对自己的提醒。&lt;/p&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;p&gt;这其实是一个老生常谈的问题，而且大部分人其实都有这个意识，Q 同学在对待大部分的命名上也都在尽量选择合适词汇。但是，对于工具函数却没有一视同仁。
比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _l(x):
    r = list(map(_ft, x))
    if len(r) == 1:
        r = r[0]
    return r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个内部函数，用来提取出爬取的元素，并根据获取的元素数量返回不同的数据结构，在爬去数据的时候多次用到。即使不想太高级的英语，直接用
&lt;code&gt;get_result_as_list_or_string&lt;/code&gt;已经可以极大地缓解在阅读过程中返回去看这里干了什么的情况。同样的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近在重构多媒体服务，包括爬虫和搜索两部分。原先的代码是一个实习生 Q 同学写的，用的 python。如果抽出其中的一块代码来看，
 Q 同学应该是一个重实践的同学，代码质量还是很不错的，但是之前看的时候我还是很难理解他的编程思路。直到这次彻底的重构，才发现代码中的一些问题。
这里记录下来，也是对自己的提醒。&lt;/p&gt;
&lt;h4&gt;命名&lt;/h4&gt;
&lt;p&gt;这其实是一个老生常谈的问题，而且大部分人其实都有这个意识，Q 同学在对待大部分的命名上也都在尽量选择合适词汇。但是，对于工具函数却没有一视同仁。
比如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def _l(x):
    r = list(map(_ft, x))
    if len(r) == 1:
        r = r[0]
    return r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个内部函数，用来提取出爬取的元素，并根据获取的元素数量返回不同的数据结构，在爬去数据的时候多次用到。即使不想太高级的英语，直接用
&lt;code&gt;get_result_as_list_or_string&lt;/code&gt;已经可以极大地缓解在阅读过程中返回去看这里干了什么的情况。同样的，用 &lt;code&gt;x&lt;/code&gt;、&lt;code&gt;r&lt;/code&gt;之类的做变量名，
虽然我可以明白这个函数在做什么操作，但是我并没有办法把它和业务的某一部分联系起来。&lt;/p&gt;
&lt;p&gt;这样的例子在整个源代码中还有很多，虽然最后还是可以看懂，但是读起来就不怎么舒畅。&lt;/p&gt;
&lt;h4&gt;保持程序的轻量&lt;/h4&gt;
&lt;p&gt;这个各人可能会有不同的习惯。我不喜欢在功能很简单的时候就引入太重量级的东西。比如，如果你整个程序只有五句 SQL，那为什么要引入一个 ORM。
多媒体服务中，一共不会用到超过10个 ES 访问，而且这些访问的语句是固定死的，也不会频繁改动。ES 的访问就是简单的 Http 请求，
所以自己写个文件来处理并不会很麻烦。但是一旦用上了 &lt;code&gt;elasticsearch-dsl-py&lt;/code&gt;, 我除了要理解 ES，还要理解这个库的用法，就为了那不多的几个 ES 请求。&lt;/p&gt;
&lt;p&gt;同样的，后台系统中是有开放可用的队列服务的，为什么一定要用 &lt;code&gt;celery&lt;/code&gt; 来复杂化这个事情，还导致重建 ES 索引这样的任务必须要用 api 才能下发。&lt;/p&gt;
&lt;h4&gt;以业务逻辑而不是功能对代码分层&lt;/h4&gt;
&lt;p&gt;按照我看代码的情况，原先的设计中包括一个接口层，一个爬虫层，一个搜索引擎的实现层，最底下是支持各个层的 lib。
Q 同学做了很多的功能划分：一个 &lt;code&gt;api&lt;/code&gt; 文件夹放所有的 api 实现，一个 &lt;code&gt;engine&lt;/code&gt; 文件夹放各个源的搜索、爬取和索引的实现文件，一个源一个文件夹。
如果严格按照这样的方式来组织文件，到也不错，问题在于，Q 同学把 ES 相关的东西也放了进去，也许是觉得 ES 也是一种搜索实现吧，
但是 ES 的数据模型等其他信息也一并放在了这里，这就让刚读代码的我有些搞不清自己之前的阅读思路是否是对的。&lt;/p&gt;
&lt;p&gt;实际上，整个业务逻辑是这样的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;用户发起搜索 --&amp;gt; 社区程序向多媒体服务发起搜索请求 --&amp;gt; 调用搜索接口，使用 ES 来搜本地库 --&amp;gt; 使用用户的搜索词去爬取、更新数据
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以，ES 虽然也是搜索，但是在中业务的层次是和这里的 &lt;code&gt;engine&lt;/code&gt; 不同的：同样是 &lt;code&gt;search.py&lt;/code&gt;, ES 下是真的搜索，其他的其实是各个爬虫的组件；
同样是 &lt;code&gt;job.py&lt;/code&gt;, 各个源下的是爬虫任务，ES 下的则爬虫的触发器;&lt;/p&gt;
&lt;p&gt;另一个问题是，因为是按照爬取的目标不同而进行的划分，所以在努力地爬取功能下完成各个工作，导致许多重复的工作。如果按照&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;爬取-&amp;gt;整理-&amp;gt;入库-&amp;gt;索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;流程，各个爬虫只要返回的多媒体数据结构一致， 入库和索引的步骤都可以用统一的实现。&lt;/p&gt;
&lt;p&gt;最终重构的时候，我去掉了 api 层，把搜索放回了社区程序，因为总共只有2 ~ 3个 ES 查询，且是强业务的功能，没有必要放在这样以爬虫为主的程序上，
还需要一层 &lt;code&gt;api&lt;/code&gt;, 用上 flask。爬取任务的触发就用 job 形式直接下发到队列。整个程序就按以下的流程来组织了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;任务监视器 --&amp;gt; 爬虫 --&amp;gt; 入库 --&amp;gt; 索引
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;又因为，去掉额外的爬取源，所以合并了爬虫和入库。&lt;/p&gt;
&lt;h4&gt;结语&lt;/h4&gt;
&lt;p&gt;代码是我写的，但是以后阅读和维护代码的人并不一定是我；我现在知道这里为什么这么写，一个月后未必知道。
所以写代码的时候要多想想应该如何保持简介和逻辑的通顺，多问问我为什要这么写。&lt;/p&gt;</content></entry><entry><title>初始化一个 Python 开发环境的正确姿势</title><link href="https://blog.jswh.me/chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html" rel="alternate"></link><published>2016-12-10T17:41:00+08:00</published><updated>2016-12-10T17:41:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-12-10:/chu-shi-hua-yi-ge-python-kai-fa-huan-jing-de-zheng-que-zi-shi.html</id><summary type="html">&lt;p&gt;在看这篇文章的时候，我需要两个假设，以避免做过多无关的解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设读者对 &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; 有最基本的了解，知道如何使用 &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt;。并且系统环境中已经安装有 Python 和 pip。&lt;/li&gt;
&lt;li&gt;假设读者对 &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtualenv&lt;/a&gt; 有最基本的了解，知道为什么要用 virtualenv。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果假设不成立，可以跟随上面的链接和 Google 来了解。&lt;/p&gt;
&lt;h3&gt;0x1 更换 pypi 源为豆瓣的源&lt;/h3&gt;
&lt;p&gt;如果网络环境好的话这一步也可以不做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.config/pip/
touch ~/.config/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pip.conf 文件中添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;60&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.doubanio.com/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x2 安装 virtualenv …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;在看这篇文章的时候，我需要两个假设，以避免做过多无关的解释。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设读者对 &lt;a href="https://www.python.org/downloads/"&gt;Python&lt;/a&gt; 有最基本的了解，知道如何使用 &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt;。并且系统环境中已经安装有 Python 和 pip。&lt;/li&gt;
&lt;li&gt;假设读者对 &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtualenv&lt;/a&gt; 有最基本的了解，知道为什么要用 virtualenv。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果假设不成立，可以跟随上面的链接和 Google 来了解。&lt;/p&gt;
&lt;h3&gt;0x1 更换 pypi 源为豆瓣的源&lt;/h3&gt;
&lt;p&gt;如果网络环境好的话这一步也可以不做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/.config/pip/
touch ~/.config/pip/pip.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在pip.conf 文件中添加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[global]&lt;/span&gt;
&lt;span class="na"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;60&lt;/span&gt;
&lt;span class="na"&gt;index-url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.doubanio.com/simple/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x2 安装 virtualenv&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x3 使用 vritualenv 初始化应用目录&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv path/to/your/app/folder/
source path/to/your/app/folder/bin/activate # 激活环境
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;virtualenv 初始化的时候可以有多种基本Python的环境选择。新版本默认是不会带上site-packages的干净环境。&lt;/p&gt;
&lt;h3&gt;0x4 安装依赖&lt;/h3&gt;
&lt;p&gt;比如 Flask &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者如果有&lt;code&gt;requirements.txt&lt;/code&gt;的话&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;0x5 把 virtualenv 环境导入编辑器/IDE&lt;/h3&gt;
&lt;p&gt;这里仅以 VSCode 为例。先安装 &lt;a href="https://code.visualstudio.com/docs/languages/python"&gt;python 的语言插件&lt;/a&gt;，然后编辑 &lt;a href="https://code.visualstudio.com/docs/customization/userandworkspace"&gt;workerspace settings&lt;/a&gt;
增加以下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;python.autoComplete.extraPaths&amp;quot;: [
    &amp;quot;path/to/your/app/folder/lib&amp;quot;
],
&amp;quot;python.pythonPath&amp;quot;:&amp;quot;path/to/your/app/folder/bin/python&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后就可以愉快的使用了。&lt;/p&gt;</content></entry><entry><title>回归社交</title><link href="https://blog.jswh.me/hui-gui-she-jiao.html" rel="alternate"></link><published>2016-11-30T06:00:00+08:00</published><updated>2016-11-30T06:00:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-11-30:/hui-gui-she-jiao.html</id><summary type="html">&lt;p&gt;之前在知乎一个关于外国人吃的问题下面，一个答主描述国外的“约饭“不像国内一样，不是真的是以吃为重点，而是以吃为由头，一群人聚在一起聊天，食物只是调剂。
同样是约饭，在他们看来不过社交的一种形式。似乎社交就是聊天，或者说交流。可是交流本身并不能构成社交。&lt;/p&gt;
&lt;p&gt;互联网时代的社交是怎样的呢？以 Facebook 和 Twitter 为代表的点赞，以微信为代表的 IM 还是各种速配应用？这些似乎是又不全是社交。
Facebook 偏表达，IM 偏工具，速配偏认识。原先没有互联网的社交是怎样的呢？对于熟人社交，我们起个由头，约个时间，组织活动，交流各自见闻，回忆回忆往昔，
男人们讨论时事， 女人们唠叨家庭。对于陌生人社交，我们参加一个公共活动（桌游、酒吧、音乐会等等），因为某个特质而欣赏某人，搭讪，聊天的时候展现自己，观察对方。
可能留下联系方式，期待后续的交流。&lt;/p&gt;
&lt;p&gt;熟人社交，即使来到了线上 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;之前在知乎一个关于外国人吃的问题下面，一个答主描述国外的“约饭“不像国内一样，不是真的是以吃为重点，而是以吃为由头，一群人聚在一起聊天，食物只是调剂。
同样是约饭，在他们看来不过社交的一种形式。似乎社交就是聊天，或者说交流。可是交流本身并不能构成社交。&lt;/p&gt;
&lt;p&gt;互联网时代的社交是怎样的呢？以 Facebook 和 Twitter 为代表的点赞，以微信为代表的 IM 还是各种速配应用？这些似乎是又不全是社交。
Facebook 偏表达，IM 偏工具，速配偏认识。原先没有互联网的社交是怎样的呢？对于熟人社交，我们起个由头，约个时间，组织活动，交流各自见闻，回忆回忆往昔，
男人们讨论时事， 女人们唠叨家庭。对于陌生人社交，我们参加一个公共活动（桌游、酒吧、音乐会等等），因为某个特质而欣赏某人，搭讪，聊天的时候展现自己，观察对方。
可能留下联系方式，期待后续的交流。&lt;/p&gt;
&lt;p&gt;熟人社交，即使来到了线上，但因为彼此的熟悉，所以没有特别的了解对方的需要，只有知道对方的近况和充分的交流需要，微信在满足了这一需要。
陌生人社交中的一部分，仅仅是猎艳，所以目标就是快速适配，陌陌们在满足这一需要。至于 Facebook 、微博，注重即时信息发布的特质，使得媒体属性要强过社交属性。
可是这里还有一批人，他们需要陌生人社交，但不是以猎艳为目的，而是仅仅希望认识有趣的人。以前的豆瓣在做这一部分，互联网上把这部分叫兴趣社交。
但基于兴趣的社交，只能遇到志趣相投的人，只是有趣的人的子集&lt;/p&gt;
&lt;p&gt;一个人在社会上生活，他的所作所为和所思所想成了他在社会的存在。不经意间，我接触到了他的在社会留下的痕迹，觉得很有意思，我很想认识这个人，与他交流。如果是在现实，
这简直是个不可能的事。而在互联网，我就可以轻易的联系上他，这样的兴趣社交--对某人产生了兴趣并期望与他发生社交的社交，没有大的应用在做这个。
兴趣是小众的，而对他人产生兴趣是大众的。&lt;/p&gt;
&lt;p&gt;想象了一下，如果我来设计这样一个应用我会做些什么？想了一下还是会像 same：分出个人与公共的空间，在个人空间留下自己的私人内容，在公共空间参与集体活动这样的基本架构。
但是细节上，我会希望 App 本身不做任何的限制和引导，把权利特别是对公共空间管理的权利交给用户，这样每一个空间才会是个性化的，而不是千篇一律的。
要有好的交流工具，满足从浅到深的各种交流的需求。去现实化，不把现实的身份带上，只把作为一个人的特质带到线上。&lt;/p&gt;
&lt;p&gt;这样的应用要产生真正的社交接触是很慢的，就像一个人来到一个陌生的城市。而且，形成了这样的氛围的时候，对新人会不友好，因为没有痕迹，别人就没法对你产生兴趣，这是个难处。
还有一点很重要：不要做推荐，让一切平等地等待被发现，否则就又会陷入兴趣的窠臼。不过，要给用户提供好发现的渠道，这个很重要。&lt;/p&gt;</content></entry><entry><title>自学指南 Flex &amp; Bison</title><link href="https://blog.jswh.me/zi-xue-zhi-nan-flex-bison.html" rel="alternate"></link><published>2016-10-12T09:33:00+08:00</published><updated>2016-10-12T09:33:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-10-12:/zi-xue-zhi-nan-flex-bison.html</id><summary type="html">&lt;p&gt;因为公司在用 phalcon，这种 c 扩展的框架 IDE 没有办法补全，所以想写一个把 zephir 转译成 PHP IDE Helper 的东西。本来想直接 Reflection 取一下类信息就好了，奈何最终效果不理想，本来 &lt;a href="https://zephir-lang.com/"&gt;Zephir&lt;/a&gt; 中有的很多信息都丢掉了，注释也全部没有。所以还是要用 passer 转译。  &lt;/p&gt;
&lt;p&gt;只能说兴趣果然是最好的老师。之前编译原理看三段打瞌睡，死活读不下去，这下却是兴致满满了。只是Flex、Bison入门资料太少，网上写的那些文章都是浅尝辄止，完全没有可实践性。读手册又太过乏味。&lt;/p&gt;
&lt;p&gt;看来看去，还是&lt;a href="http://web.iitd.ac.in/~sumeet/flex__bison.pdf"&gt;动物书的 Flex &amp;amp; Bison&lt;/a&gt; 读起来舒服。&lt;/p&gt;
&lt;p&gt;对于词法分析语法分析完全没有概念的同学，可以先看看&lt;a href="http://www.capsl.udel.edu/courses/cpeg421/2012/slides/Tutorial-Flex_Bison.pdf"&gt;这个 PDF&lt;/a&gt; 了解一下，再读动物书会好一些，不然有些没头没脑。内容基本和书里的第一章重合，但简单介绍了一下 Flex …&lt;/p&gt;</summary><content type="html">&lt;p&gt;因为公司在用 phalcon，这种 c 扩展的框架 IDE 没有办法补全，所以想写一个把 zephir 转译成 PHP IDE Helper 的东西。本来想直接 Reflection 取一下类信息就好了，奈何最终效果不理想，本来 &lt;a href="https://zephir-lang.com/"&gt;Zephir&lt;/a&gt; 中有的很多信息都丢掉了，注释也全部没有。所以还是要用 passer 转译。  &lt;/p&gt;
&lt;p&gt;只能说兴趣果然是最好的老师。之前编译原理看三段打瞌睡，死活读不下去，这下却是兴致满满了。只是Flex、Bison入门资料太少，网上写的那些文章都是浅尝辄止，完全没有可实践性。读手册又太过乏味。&lt;/p&gt;
&lt;p&gt;看来看去，还是&lt;a href="http://web.iitd.ac.in/~sumeet/flex__bison.pdf"&gt;动物书的 Flex &amp;amp; Bison&lt;/a&gt; 读起来舒服。&lt;/p&gt;
&lt;p&gt;对于词法分析语法分析完全没有概念的同学，可以先看看&lt;a href="http://www.capsl.udel.edu/courses/cpeg421/2012/slides/Tutorial-Flex_Bison.pdf"&gt;这个 PDF&lt;/a&gt; 了解一下，再读动物书会好一些，不然有些没头没脑。内容基本和书里的第一章重合，但简单介绍了一下 Flex/Bison 是用来做什么的。&lt;/p&gt;
&lt;p&gt;总结：
1. &lt;a href="http://www.capsl.udel.edu/courses/cpeg421/2012/slides/Tutorial-Flex_Bison.pdf"&gt;这个 PDF&lt;/a&gt; 
2. &lt;a href="http://web.iitd.ac.in/~sumeet/flex__bison.pdf"&gt;动物书的 Flex &amp;amp; Bison&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>20161004</title><link href="https://blog.jswh.me/20161004.html" rel="alternate"></link><published>2016-10-04T04:26:00+08:00</published><updated>2016-10-04T04:26:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-10-04:/20161004.html</id><summary type="html">&lt;p&gt;大半夜的睡不着。一半是因为老家秋天的蚊子，大个，嗡嗡声能达数个分呗，一口一个大包；另一半还是每次回家都止不住的沮丧程序。看着年久失修，墙壁霉变剥落的房子；年老枯瘦依旧满面愁容的奶奶；年近七十依然紧闭大门外出劳作的外公外婆；满面风尘的舅舅，不沮丧也难。  &lt;/p&gt;
&lt;p&gt;想到车房妻子俱全的大哥，静待二哥结婚越活越年轻的姑父母，以及刚在上海买房的二哥，想想自己的工资与上海房价的比例，沮丧更胜之前。  &lt;/p&gt;
&lt;p&gt;就在几天前，还对寒茹谆谆教导：最重要的不是别人有什么，而是你自己想要什么。当自己遇到了同样的境地，却也还是忍不住涌起各种情绪。不论是因为别人拥有的生活之艰还是生活之幸。  &lt;/p&gt;
&lt;p&gt;熬了一个半夜，看完了《从你的全世界路过》。之前并没有了解过作者，只是最近电影上映，亚马逊的 kindle 包月服务又能免费借阅，乘着家里没网，随便读读。也许是很久没有读这样的文字了，侨情的情绪弥漫到每个毛孔，又说不清楚侨情什么。现在，我已经完全记不得书里的任何一个故事了，只有那种情绪转化成忧伤挥之不去，只能呓语。&lt;/p&gt;
&lt;p&gt;张嘉佳是幸福的，不论如何他还有故事有酒，他还有朋友，不管故事的真实度几分。我不会喝酒，也没有他那样的朋友。但我也是幸福的，父母俱在身体健康，有一个感情很好的女朋友 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;大半夜的睡不着。一半是因为老家秋天的蚊子，大个，嗡嗡声能达数个分呗，一口一个大包；另一半还是每次回家都止不住的沮丧程序。看着年久失修，墙壁霉变剥落的房子；年老枯瘦依旧满面愁容的奶奶；年近七十依然紧闭大门外出劳作的外公外婆；满面风尘的舅舅，不沮丧也难。  &lt;/p&gt;
&lt;p&gt;想到车房妻子俱全的大哥，静待二哥结婚越活越年轻的姑父母，以及刚在上海买房的二哥，想想自己的工资与上海房价的比例，沮丧更胜之前。  &lt;/p&gt;
&lt;p&gt;就在几天前，还对寒茹谆谆教导：最重要的不是别人有什么，而是你自己想要什么。当自己遇到了同样的境地，却也还是忍不住涌起各种情绪。不论是因为别人拥有的生活之艰还是生活之幸。  &lt;/p&gt;
&lt;p&gt;熬了一个半夜，看完了《从你的全世界路过》。之前并没有了解过作者，只是最近电影上映，亚马逊的 kindle 包月服务又能免费借阅，乘着家里没网，随便读读。也许是很久没有读这样的文字了，侨情的情绪弥漫到每个毛孔，又说不清楚侨情什么。现在，我已经完全记不得书里的任何一个故事了，只有那种情绪转化成忧伤挥之不去，只能呓语。&lt;/p&gt;
&lt;p&gt;张嘉佳是幸福的，不论如何他还有故事有酒，他还有朋友，不管故事的真实度几分。我不会喝酒，也没有他那样的朋友。但我也是幸福的，父母俱在身体健康，有一个感情很好的女朋友，还有一只顽皮的小猫。只是书里面的人物只需要表达强烈的情感，不论困苦或者富裕，都不须理会世俗的欲望。而现实中的我，却始终逃不脱房车婚子这些事。也许是我太过浪荡，但心里总还是“诗和远方”。&lt;/p&gt;
&lt;p&gt;傍晚和大哥聊起前次跳槽，不紧损失了十多万的股票，也并没有为简历添加更多的内容。从钱和潜在的钱的角度出发，真的已经可以判定是次失败的跳槽。但是想想自己得到也不少，巩固的感情、自由的上班时间、自主的产品探索，当时也不是为了钱才跳槽的，算是给自己一些安慰吧。&lt;/p&gt;
&lt;p&gt;读完书，觉的自己之前也是被长远规划和满心抱负蒙蔽太久，生活里充斥的只有代码。遂决定以后每个周末都去看看母亲，趁她下午休息，买杯果汁，聊上半小时一小时。我也不知道这其中的因果何在。  &lt;/p&gt;
&lt;p&gt;如果能找到一份远程的工作就好了，最好是国外的，那所有的梦想就实现了一半。&lt;/p&gt;</content></entry><entry><title>jswh 会 jswh</title><link href="https://blog.jswh.me/jswh-hui-jswh.html" rel="alternate"></link><published>2016-07-10T04:12:00+08:00</published><updated>2016-07-10T04:12:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-07-10:/jswh-hui-jswh.html</id><summary type="html">&lt;p&gt;乐空空上两个版本周期中，抛开所有业务上的事，把我自己认为乐空空在 Laravel 上应该改的基础架构都改了。在快接近尾声的时候，发现自己似乎已经没什么想要做的事了。这个时候已经开始焦虑了：我绝的乐空空应该还有还有很多事要做，为什么到这里就没事可做了呢？我的能力到头了或者这个产品目前到头了。刚好这时候版本开发出现了延误，闲而又闲之下就琢磨，越琢磨越觉得现在的开发流程有问题，但觉得自己不出在管理的职位上，并不应该去管理这些事情。一来感觉无事可做，而来对产品没信心，三来觉得无力改变现状，所以看待什么都很消极。&lt;/p&gt;
&lt;p&gt;向前辈咨询，被领导谈话。经过各种各样的梳理和解压，脑子渐渐冷静下来。再次慢慢回想这些事情，确实整个团队是有一些问题，但出现那样的强烈的负面情绪，问题还是在自己身上。本质的原因还是对自己能力的怀疑。在有事可以忙碌的时候，精神专注在解决问题上，没有经历去考虑这些问题，但一旦闲下来，就会不停地想：我到底掌握了那些东西？掌握到多少程度？我到底可以解决多大程度问题？我解决的问题到底价值几何？我到底价值几何？&lt;/p&gt;
&lt;p&gt;有这些疑问的原因其实一直都很清楚。第一，我一直耿耿于怀自己非专业的出生，觉得自己在很多基础的问题上掌握不好；第二，在没有考试和分数之后，已经失去了对自己能力的衡量方式。问题很明确，但是一直都没有很明确的办法。&lt;/p&gt;
&lt;p&gt;也做过很多目的并不明确的尝试。比如做很多个人项目 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;乐空空上两个版本周期中，抛开所有业务上的事，把我自己认为乐空空在 Laravel 上应该改的基础架构都改了。在快接近尾声的时候，发现自己似乎已经没什么想要做的事了。这个时候已经开始焦虑了：我绝的乐空空应该还有还有很多事要做，为什么到这里就没事可做了呢？我的能力到头了或者这个产品目前到头了。刚好这时候版本开发出现了延误，闲而又闲之下就琢磨，越琢磨越觉得现在的开发流程有问题，但觉得自己不出在管理的职位上，并不应该去管理这些事情。一来感觉无事可做，而来对产品没信心，三来觉得无力改变现状，所以看待什么都很消极。&lt;/p&gt;
&lt;p&gt;向前辈咨询，被领导谈话。经过各种各样的梳理和解压，脑子渐渐冷静下来。再次慢慢回想这些事情，确实整个团队是有一些问题，但出现那样的强烈的负面情绪，问题还是在自己身上。本质的原因还是对自己能力的怀疑。在有事可以忙碌的时候，精神专注在解决问题上，没有经历去考虑这些问题，但一旦闲下来，就会不停地想：我到底掌握了那些东西？掌握到多少程度？我到底可以解决多大程度问题？我解决的问题到底价值几何？我到底价值几何？&lt;/p&gt;
&lt;p&gt;有这些疑问的原因其实一直都很清楚。第一，我一直耿耿于怀自己非专业的出生，觉得自己在很多基础的问题上掌握不好；第二，在没有考试和分数之后，已经失去了对自己能力的衡量方式。问题很明确，但是一直都没有很明确的办法。&lt;/p&gt;
&lt;p&gt;也做过很多目的并不明确的尝试。比如做很多个人项目，并希望通过个人项目掌握不同的技能；比如考虑过考研，甚至投递国外大学的硕士申请；比如尝试去看大学的计算机教程。但很多尝试最后都不了了之。放弃的原因就是觉得要么无法改变问题一，要么无法解决问题二。&lt;/p&gt;
&lt;p&gt;其实，还有问题三。我的内心很焦躁，很着急。我希望我可以快速地把别人多年的积累补起来，我希望可以快速地积累财富，我希望自己可以快速的变好。当我意识到自己工作两年了，虽然感觉自己有一些长进，但是不明白自己长进在哪里，似乎还是和以前差不多时候，我觉得我太慢了。所更加焦躁。昨天和女朋友谈心，虽然成因不同，她也有同样的心理。分析她的心理的时候，才意识自己表面冷静，其实也是半斤八两。&lt;/p&gt;
&lt;p&gt;怎么办？其实也好办。让自己平静下来，把自己认为应该补的东西补上来，找一种衡量自己补的好不好方法，两个问题就都解决了。然而，就和鸡汤一样，大道理谁都懂。&lt;/p&gt;
&lt;p&gt;还是要有一些实际的方法，毕竟我是一个那么会做计划的人，也是我觉得自己唯一不比比人弱的地方。&lt;/p&gt;
&lt;p&gt;现在是工作两个，我希望在我工作三年的时候，以上的两个问题都不在是问题，也就是给自己一年时间来解决这些问题。&lt;/p&gt;
&lt;p&gt;不在开新的个人项目，原来的项目该放弃放弃，可以完善的完善但是尽快阶段性结束，不在考虑自己的框架之类虚无缥缈的事。有任何的主意可以记着，可以写成类似项目规划的东西防止忘记。认真学习自己认为应该补习的东西，做好练习题，练习题就是衡量。刷 LeetCode, 这真的是最直接的能力衡量了。&lt;/p&gt;
&lt;p&gt;需要加强工作的总结。这一点其实挺重要的，毕竟生活中大部分时间都在工作。如果说要明确自己能力，也许可以列出自己曾经解决过什么样的问题如何解决的是最具说服力的了。可以用文章的形式写出来，也可用代码的形式的来表述。程序员么，还是 show me the code。&lt;/p&gt;
&lt;p&gt;愿自己如网名 jswh 原本的意义一样，平静而底蕴深厚，宠辱不惊。&lt;/p&gt;</content></entry><entry><title>为什么写博客</title><link href="https://blog.jswh.me/wei-shi-yao-xie-bo-ke.html" rel="alternate"></link><published>2016-07-01T06:00:00+08:00</published><updated>2016-07-01T06:00:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-07-01:/wei-shi-yao-xie-bo-ke.html</id><summary type="html">&lt;p&gt;凌晨四点不睡觉，大概是觉得自己还有该做的事没有做完。毕竟这对与我来可能会是一个影响较大的决定。&lt;/p&gt;
&lt;h3&gt;目的驱动的人&lt;/h3&gt;
&lt;p&gt;一直都认为自己是一个强烈的目的驱动的人。如果做一件事而不知道为什么便无法投入，也就无法坚持并做好。&lt;br&gt;
所以每当自己决定要做一件事情的时候，就要为这件事找一个意义出来。然而，今天仔细思考目的和作用的区别时候，才醒悟为什么很多自认明明很有意义的事情，却总是没法好好坚持下来。&lt;br&gt;
因为我是一个强烈的目的驱动的人。&lt;br&gt;
比如说写博客这件事吧。当我决定要好好写博客的时候，我会为这件事找个意义。写博客可以记录自己学习和生活的经历；可以把自己的所思所想归档；写作是一种系统化自己思想的过程。所以我要好好写博客。&lt;br&gt;
这是自欺欺人。所有的这些都是写博客的作用，而不是写博客的目的。很多时候想要做一件事，却不知道为什么要做一件事，便把做了这件事的作用或者说好处当做自己目的。以此为之的时候，内心便不再对自己所做的事抱有信念。所谓大道理我都懂，可是臣妾做不到啊。&lt;br&gt;
想清楚目的时候，写博客便只是一种手段了。我希望把自己的所思所想归档，这是我的目的，而写博客只是达成目的的一种手段。因为是对目的保持的注意力，写博客本身便不会成为一种煎熬。  &lt;/p&gt;
&lt;h3&gt;直面内心的阴暗&lt;/h3&gt;
&lt;p&gt;但是很多时候，做一件的目的是不纯的。每当此时，就会给自己一个冠冕堂皇的理由。而这个理由又往往是从作用挑拣出来的好的部分。再次达到自欺欺人的目的。&lt;br&gt;
还是写博客这件事。我知道确实有很多人写博客仅仅是为了记录，但如&lt;a href="http://jswh.me/#/single/docs/高速缓冲存储器/输入与输出.md"&gt;上一篇&lt;/a&gt;所述 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;凌晨四点不睡觉，大概是觉得自己还有该做的事没有做完。毕竟这对与我来可能会是一个影响较大的决定。&lt;/p&gt;
&lt;h3&gt;目的驱动的人&lt;/h3&gt;
&lt;p&gt;一直都认为自己是一个强烈的目的驱动的人。如果做一件事而不知道为什么便无法投入，也就无法坚持并做好。&lt;br&gt;
所以每当自己决定要做一件事情的时候，就要为这件事找一个意义出来。然而，今天仔细思考目的和作用的区别时候，才醒悟为什么很多自认明明很有意义的事情，却总是没法好好坚持下来。&lt;br&gt;
因为我是一个强烈的目的驱动的人。&lt;br&gt;
比如说写博客这件事吧。当我决定要好好写博客的时候，我会为这件事找个意义。写博客可以记录自己学习和生活的经历；可以把自己的所思所想归档；写作是一种系统化自己思想的过程。所以我要好好写博客。&lt;br&gt;
这是自欺欺人。所有的这些都是写博客的作用，而不是写博客的目的。很多时候想要做一件事，却不知道为什么要做一件事，便把做了这件事的作用或者说好处当做自己目的。以此为之的时候，内心便不再对自己所做的事抱有信念。所谓大道理我都懂，可是臣妾做不到啊。&lt;br&gt;
想清楚目的时候，写博客便只是一种手段了。我希望把自己的所思所想归档，这是我的目的，而写博客只是达成目的的一种手段。因为是对目的保持的注意力，写博客本身便不会成为一种煎熬。  &lt;/p&gt;
&lt;h3&gt;直面内心的阴暗&lt;/h3&gt;
&lt;p&gt;但是很多时候，做一件的目的是不纯的。每当此时，就会给自己一个冠冕堂皇的理由。而这个理由又往往是从作用挑拣出来的好的部分。再次达到自欺欺人的目的。&lt;br&gt;
还是写博客这件事。我知道确实有很多人写博客仅仅是为了记录，但如&lt;a href="http://jswh.me/#/single/docs/高速缓冲存储器/输入与输出.md"&gt;上一篇&lt;/a&gt;所述，我并不喜欢这么做。虽然嘴上说着不要，但我还是喜欢被很多人看到，得到别人的认可。用薛之谦的话来说就是“我想红”。&lt;br&gt;
这是一个不那么纯洁的理由，可是事实却是如此。只不过，我以前一直在逃避，不愿承认罢了。&lt;/p&gt;
&lt;h3&gt;话语权的年代&lt;/h3&gt;
&lt;p&gt;这是一个话语权的作用极大地放大的年代，一个个网红权威大牛专家，只要有影响力，便可以一呼百应。剩下的便都不是问题。酒香不怕巷子深，但是往往这酒还没酿到一十八载飘香百里，大众的注意力就已经远在千里之外了。在这样的氛围之下，作为一个技术人员，作为一个期待财富快速增长的技术人员，如果没有人背书，很难通过技术的沉淀让那些几十秒甚至十几秒就过一份简历的r人事肯定你的价值。&lt;br&gt;
所以，我需要“红”。需要在沉淀的基础上经营自己的个人品牌。粉丝、文章、开源项目, 要让这些成为自己的背书。&lt;/p&gt;
&lt;h3&gt;不只是写博客&lt;/h3&gt;
&lt;p&gt;至此，博客就成为了一种手段。所以不在拘泥于github pages，而要把自己产出散布到各处，知乎、简书，甚至微信公众号。此外，还要整理自己写过代码，该完善的完善，该打包的打包，该发布的发布。把自己主动的暴露给别人，甚至强行塞到别人怀里，而不要等着别人来挖掘，甚至还藏着掖着。这个信息爆炸的年代，如果不能脱颖而出，就只会被后来者掩埋。&lt;/p&gt;</content></entry><entry><title>输入与输出</title><link href="https://blog.jswh.me/shu-ru-yu-shu-chu.html" rel="alternate"></link><published>2016-06-15T22:00:00+08:00</published><updated>2016-06-15T22:00:00+08:00</updated><author><name>jswh</name></author><id>tag:blog.jswh.me,2016-06-15:/shu-ru-yu-shu-chu.html</id><summary type="html">&lt;p&gt;最近一直在思考关于信息的输入与输出的问题。  &lt;/p&gt;
&lt;p&gt;每天，我们都在接受大量的信息。以我自己来说，微信、微博、知乎这些碎片化的；书籍、教程，公开课，MOOC这些系统化的。并且，花在前者中的时间越来越多，在每天所获取的信息中占的比重越来越大。每天都在接受海量的信息，可是躺在床上睡不着的时候却总是无事可想。（也许也不错，越想越睡不着）  &lt;/p&gt;
&lt;p&gt;另一个感受就是无事可写。  &lt;/p&gt;
&lt;p&gt;我不喜欢用博客做笔记，尤其是把别人写过的东西再写一遍。复制粘贴然后当做自己的产出，那真是一件很无聊的事。文笔不好，所以也不喜欢写太多的随笔记录；个人习惯也不喜欢公开私人生活，所以几乎不写这类的博客。那么，写些什么呢。以前的内容通常都是思考和总结，读书然后化到自己的生活中，出现自己的体会，再慢慢地转化成思索，最后输出成文字。  &lt;/p&gt;
&lt;p&gt;而现在，我觉得没有什么可以写了。有的时候会有一些简短的思索出现，但是能成型的文字，通常仅仅足够发一个朋友圈，再多也没有了。碎片化的输入，导致了碎片化的输出。  &lt;/p&gt;
&lt;p&gt;在我的观念中，信息的输出是输入知识化的体现。所谓知识化，就是指经过个人对输入的信息经过加工，形成可以传递下去的经验或见解。而其中又可分整理型的和创造型的输出。而碎片化输入的零星内容，在没有相关的知识背景的情况下很难作为归纳总结的对象 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近一直在思考关于信息的输入与输出的问题。  &lt;/p&gt;
&lt;p&gt;每天，我们都在接受大量的信息。以我自己来说，微信、微博、知乎这些碎片化的；书籍、教程，公开课，MOOC这些系统化的。并且，花在前者中的时间越来越多，在每天所获取的信息中占的比重越来越大。每天都在接受海量的信息，可是躺在床上睡不着的时候却总是无事可想。（也许也不错，越想越睡不着）  &lt;/p&gt;
&lt;p&gt;另一个感受就是无事可写。  &lt;/p&gt;
&lt;p&gt;我不喜欢用博客做笔记，尤其是把别人写过的东西再写一遍。复制粘贴然后当做自己的产出，那真是一件很无聊的事。文笔不好，所以也不喜欢写太多的随笔记录；个人习惯也不喜欢公开私人生活，所以几乎不写这类的博客。那么，写些什么呢。以前的内容通常都是思考和总结，读书然后化到自己的生活中，出现自己的体会，再慢慢地转化成思索，最后输出成文字。  &lt;/p&gt;
&lt;p&gt;而现在，我觉得没有什么可以写了。有的时候会有一些简短的思索出现，但是能成型的文字，通常仅仅足够发一个朋友圈，再多也没有了。碎片化的输入，导致了碎片化的输出。  &lt;/p&gt;
&lt;p&gt;在我的观念中，信息的输出是输入知识化的体现。所谓知识化，就是指经过个人对输入的信息经过加工，形成可以传递下去的经验或见解。而其中又可分整理型的和创造型的输出。而碎片化输入的零星内容，在没有相关的知识背景的情况下很难作为归纳总结的对象，又不够作为创造的工具组件，所以很难形成有效知识化过程。更何况，我们日常接触的信息碎片，有多少是真正有价值的呢。  &lt;/p&gt;
&lt;p&gt;在有了这样的认识之后，我删除了自己手机中的所有的碎片化阅读工具，只保留了feedly作为收集各类碎片内容的信息源, 每天花费少量的时间过一遍，并选取可能作为自己知识组件的部分或者单纯为了娱乐阅读。  &lt;/p&gt;
&lt;p&gt;在节约了一些时间之后，我考虑重新开始系统化输入的事情。简单来说就是，自大学毕业甚至是大学停课以来，我就没有真正完整的看过一本知识类的书籍了。这时还没有特别需要深入的方向，所以就是由着兴趣来读了。挑来挑去，发现自己还是对计算机最感兴趣，又自感相关基础薄弱，便决定从计算机基础开始。  &lt;/p&gt;
&lt;p&gt;然而，工作的排期和生活琐碎已经挤占了大部分的时间，再回忆起大学时期游戏动漫苦闷想入非非的那些时光，除了怀念还带上了一些惭愧，也才真正理解老师那句恨铁不成钢的：大学是学习的最好时间。  &lt;/p&gt;</content></entry></feed>